{"version":3,"file":"grab-api.es.js","sources":["../src/log.ts","../src/grab-api.ts"],"sourcesContent":["/**\n * ### Colorized Log With JSON Structure\n * ![Debug log](https://i.imgur.com/R8Qp6Vg.png)\n * Logs messages to the console with custom styling,\n * prints JSON with description of structure layout,\n * and showing debug output in development only.\n * @param {string|object} message - The message to log. If an object is provided, it will be stringified.\n * @param {string|string[]} [options.style] default='color: blue; font-size: 11pt;' - CSS style string\n * @param {boolean} [options.hideInProduction] -  default = auto-detects based on hostname.\n *  If true, uses `console.debug` (hidden in production). If false, uses `console.log`.\n *\n */\nexport function log(message: string|object  = \"\", options: LogOptions = {}) {\n  let {\n    color = null,\n    style = \"color: #66ccff; font-size: 10pt;\",\n    hideInProduction = undefined,\n    startSpinner = false,\n    stopSpinner = false,\n  } = options;\n\n  // Auto-detect if we should hide logs in production based on hostname\n  if (typeof hideInProduction === \"undefined\")\n    hideInProduction =\n      typeof window !== \"undefined\" &&\n      window?.location.hostname.includes(\"localhost\");\n\n  // For objects, print both the structure visualization and full JSON\n  if (typeof message === \"object\")\n    message =\n      printJSONStructure(message) + \"\\n\\n\" + JSON.stringify(message, null, 2);\n\n  //colorize in terminal (%c is only in browser)\n  if (color && typeof process !== undefined)\n    message = (colors[color] || \"\") + message + colors.reset;\n\n  //  Displays an animated spinner in the terminal with the provided text.\n  var i = 0;\n\n  if (startSpinner)\n    (global || globalThis).interval = setInterval(() => {\n      process.stdout.write(\n        (colors[color] || \"\") +\n          \"\\r\" +\n          \"⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏\".split(\"\")[(i = ++i % 10)] +\n          \" \" +\n          message +\n          colors.reset\n      );\n    }, 50);\n  else if (stopSpinner) {\n    clearInterval((global || globalThis).interval);\n    process.stdout.write(\n      \"\\r\" + (message || \"✔ Done\") + \" \".repeat(message.length + 20) + \"\\n\"\n    );\n  } else if (typeof style === \"string\") {\n    // check if style is a one word color code or named color\n    //test if style is valid as a CSS color name\n    if (style.split(\" \").length == 1 || color) {\n      style = `color: ${color || style}; font-size: 11pt;`;\n    } else {\n      // check if style is valid as a CSS color code\n      if (style.match(/^#[0-9a-fA-F]{6}$/)) {\n        style = `color: ${style}; font-size: 11pt;`;\n      }\n    }\n    // Use console.debug for production-hidden logs, console.log otherwise\n    if (hideInProduction)\n      console.debug((style ? \"%c\" : \"\") + (message || \"\"), style);\n    else console.log((style ? \"%c\" : \"\") + (message || \"\"), style);\n  } else if (typeof style === \"object\") console.log(message, ...(style as any));\n  return true;\n}\n\nexport interface LogOptions {\n  /** CSS style string or array of CSS strings for browser console styling */\n  style?: string | string[];\n  /** Optional color name or code for terminal environments */\n  color?: keyof typeof colors | null;\n  /** If true, hides log in production (auto-detects by hostname if undefined) */\n  hideInProduction?: boolean;\n  /** Start a spinner (for CLI tools, optional) */\n  startSpinner?: boolean;\n  /** Stop a spinner (for CLI tools, optional) */\n  stopSpinner?: boolean;\n}\n\n// ANSI escape codes for terminal colors when running in Node.js\nexport const colors = {\n  reset: \"\\x1b[0m\", // Reset to default color\n  black: \"\\x1b[30m\",\n  red: \"\\x1b[31m\", // Functions, errors\n  green: \"\\x1b[32m\", // Object braces, success\n  yellow: \"\\x1b[33m\", // Strings, warnings\n  blue: \"\\x1b[34m\", // Array brackets, info\n  magenta: \"\\x1b[35m\", // Booleans\n  cyan: \"\\x1b[36m\", // Numbers\n  white: \"\\x1b[37m\", // Default color, plain text\n  gray: \"\\x1b[90m\", // Null, undefined, subtle\n  // Bright variants\n  brightRed: \"\\x1b[91m\",\n  brightGreen: \"\\x1b[92m\",\n  brightYellow: \"\\x1b[93m\",\n  brightBlue: \"\\x1b[94m\",\n  brightMagenta: \"\\x1b[95m\",\n  brightCyan: \"\\x1b[96m\",\n  brightWhite: \"\\x1b[97m\",\n  // Background colors (optional)\n  bgRed: \"\\x1b[41m\",\n  bgGreen: \"\\x1b[42m\",\n  bgYellow: \"\\x1b[43m\",\n  bgBlue: \"\\x1b[44m\",\n  bgMagenta: \"\\x1b[45m\",\n  bgCyan: \"\\x1b[46m\",\n  bgWhite: \"\\x1b[47m\",\n  bgGray: \"\\x1b[100m\",\n};\n\n/**\n * Determines the appropriate color code for a given value type\n * Used for consistent color coding in the structure visualization\n */\nfunction getColorForType(value) {\n  if (typeof value === \"string\") return colors.yellow;\n  if (typeof value === \"number\") return colors.cyan;\n  if (typeof value === \"boolean\") return colors.magenta;\n  if (typeof value === \"function\") return colors.red;\n  if (value === null) return colors.gray;\n  if (Array.isArray(value)) return colors.blue;\n  if (typeof value === \"object\") return colors.green;\n  return colors.white;\n}\n\n/**\n * Returns a string representation of the value's type\n * Used to show simplified type information in the structure visualization\n */\nfunction getTypeString(value) {\n  if (typeof value === \"string\") return '\"\"';\n  if (typeof value === \"number\") return \"number\";\n  if (typeof value === \"boolean\") return \"bool\";\n  if (typeof value === \"function\") return \"function\";\n  if (value === null) return \"null\";\n  if (Array.isArray(value)) {\n    if (value.length) return \"[\" + getTypeString(value[0]) + \"]\";\n    else return \"[]\";\n  }\n  if (typeof value === \"object\") return \"{...}\";\n  return typeof value;\n}\n\n/**\n * Creates a colored visualization of a JSON object's structure\n * Shows the shape and types of the data rather than actual values\n * Recursively processes nested objects and arrays\n */\nexport function printJSONStructure(obj, indent = 0) {\n  const pad = \"  \".repeat(indent);\n\n  // Handle primitive values and null\n  if (typeof obj !== \"object\" || obj === null) {\n    const color = getColorForType(obj);\n    return color + getTypeString(obj) + colors.reset;\n  }\n\n  // Handle arrays with special bracket formatting\n  if (Array.isArray(obj)) {\n    let result = colors.blue + \"[\" + colors.reset;\n    if (obj.length) result += \"\\n\";\n    obj.forEach((item, idx) => {\n      result += pad + \"  \" + printJSONStructure(item, indent + 1);\n      if (idx < obj.length - 1) result += \",\";\n      result += \"\\n\";\n    });\n    result += pad + colors.blue + \"]\" + colors.reset;\n    return result;\n  }\n\n  // Handle objects with special brace and property formatting\n  let result = colors.green + \"{\" + colors.reset;\n  const keys = Object.keys(obj);\n  if (keys.length) result += \"\\n\";\n  keys.forEach((key, index) => {\n    const value = obj[key];\n    const color = getColorForType(value);\n    result += pad + \"  \";\n\n    // Handle nested objects recursively\n    if (typeof value === \"object\" && value !== null && !Array.isArray(value)) {\n      result +=\n        color +\n        key +\n        colors.reset +\n        \": \" +\n        printJSONStructure(value, indent + 1);\n    }\n    // Handle nested arrays recursively\n    else if (Array.isArray(value)) {\n      result +=\n        color +\n        key +\n        colors.reset +\n        \": \" +\n        printJSONStructure(value, indent + 1);\n    }\n    // Handle primitive values\n    else {\n      result += color + key + \": \" + getTypeString(value) + colors.reset;\n    }\n    if (index < keys.length - 1) result += \",\";\n    result += \"\\n\";\n  });\n  result += pad + colors.green + \"}\" + colors.reset;\n\n  // Only log at top level of recursion\n  if (indent === 0) {\n    // console.log(result);\n  }\n  return result;\n}\n\n/**\n * Shows message in a modal overlay with scrollable message stack\n * and is easier to dismiss unlike alert() which blocks window.\n * Creates a semi-transparent overlay with a white box containing the message.\n * @param {string} msg - The message to display\n */\nexport function showAlert(msg) {\n  if (typeof document === \"undefined\") return;\n  let o = document.getElementById(\"alert-overlay\"),\n    list;\n\n  // Create overlay and alert box if they don't exist\n  if (!o) {\n    o = document.body.appendChild(document.createElement(\"div\"));\n    o.id = \"alert-overlay\";\n    o.setAttribute(\n      \"style\",\n      \"position:fixed;inset:0;z-index:9999;background:rgba(0,0,0,0.5);display:flex;align-items:center;justify-content:center\"\n    );\n    o.innerHTML = `<div id=\"alert-box\" style=\"background:#fff;padding:1.5em 2em;border-radius:8px;box-shadow:0 2px 16px #0003;min-width:220px;max-height:80vh;position:relative;display:flex;flex-direction:column;\">\n      <button id=\"close-alert\" style=\"position:absolute;top:12px;right:20px;font-size:1.5em;background:none;border:none;cursor:pointer;color:black;\">&times;</button>\n      <div id=\"alert-list\" style=\"overflow:auto;flex:1;\"></div>\n    </div>`;\n\n    // Add click handlers to close overlay\n    o.addEventListener(\"click\", (e) => e.target == o && o.remove());\n    document.getElementById(\"close-alert\").onclick = () => o.remove();\n  }\n\n  list = o.querySelector(\"#alert-list\");\n\n  // Add new message to list\n  list.innerHTML += `<div style=\"border-bottom:1px solid #333; font-size:1.2em;margin:0.5em 0;\">${msg}</div>`;\n}\n\n/**\n * Sets up development tools for debugging API requests\n * Adds a keyboard shortcut (Ctrl+I) that shows a modal with request history\n * Each request entry shows:\n * - Request path\n * - Request details\n * - Response data\n * - Timestamp\n */\nexport function setupDevTools() {\n  // Keyboard shortcut (Ctrl+I) to toggle debug view\n  document.addEventListener(\"keydown\", (e) => {\n    if (e.key === \"i\" && e.ctrlKey) {\n      // Create HTML of the grab.log requests\n      let html = \" \";\n      for (let request of grab.log) {\n        html += `<div style=\"margin-bottom:1em; border-bottom:1px solid #ccc; padding-bottom:1em;\">\n          <b>Path:</b> ${request.path}<br>\n          <b>Request:</b> ${request.request}<br>\n          <b>Response:</b> ${JSON.stringify(request.response, null, 2)}<br>\n          <b>Time:</b> ${new Date(request.lastFetchTime).toLocaleString()}\n        </div>`;\n      }\n      showAlert(html);\n    }\n  });\n}\n\n/**\n * Displays an animated spinner in the terminal with the provided text.\n * The spinner animates in-place until the returned function is called,\n * which stops the spinner and prints a success message.\n * @param {string} text - The text to display next to the spinner animation.\n * @returns {(success?: string) => void} Stop function with optional message.\n * @example\n * const stopSpinner = showSpinnerInTerminal('Downloading...');\n * setTimeout(() => {\n *    stopSpinner('Success!');\n * }, 2000);\n */\nexport function showSpinnerInTerminal(text) {\n  let i = 0,\n    interval = setInterval(() => {\n      process.stdout.write(\n        \"\\r\" + \"⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏\".split(\"\")[(i = ++i % 10)] + \" \" + text\n      );\n    }, 50);\n\n  return function (success = \"✔ Done!\") {\n    clearInterval(interval);\n    process.stdout.write(\"\\r\" + success + \" \".repeat(text.length) + \"\\n\");\n  };\n}\n","import {\n  printJSONStructure,\n  log,\n  showAlert,\n  setupDevTools,\n  type LogOptions,\n} from \"./log\";\n\n/**\n * TODO\n *  - react tests\n *  - grab error popup and dev tool\n *  - show net log in alert\n *  - progress\n *  - pagination working\n *  - tests in stackblitz\n *  - loading icons\n *  - cache revalidation\n */\n\n/**\n * ### GRAB: Generate Request to API from Browser\n * ![GrabAPILogo](https://i.imgur.com/xWD7gyV.png)\n *\n * 1. **GRAB is the FBEST Request Manager: Functionally Brilliant, Elegantly Simple Tool**: One Function, no dependencies,\n *    minimalist syntax, [more features than alternatives](https://grab.js.org/guide/Comparisons)\n * 2. **Auto-JSON Convert**: Pass parameters and get response or error in JSON, handling other data types as is.\n * 3. **isLoading Status**: Sets `.isLoading=true` on the pre-initialized response object so you can show a \"Loading...\" in any framework\n * 4. **Debug Logging**: Adds global `log()` and prints colored JSON structure, response, timing for requests in test.\n * 5. **Mock Server Support**: Configure `window.grab.mock` for development and testing environments\n * 6. **Cancel Duplicates**: Prevent this request if one is ongoing to same path & params, or cancel the ongoing request.\n * 7. **Timeout & Retry**: Customizable request timeout, default 30s, and auto-retry on error\n * 8. **DevTools**: `Ctrl+I` overlays webpage with devtools showing all requests and responses, timing, and JSON structure.\n * 9. **Request History**: Stores all request and response data in global `grab.log` object\n * 10. **Pagination Infinite Scroll**: Built-in pagination for infinite scroll to auto-load and merge next result page, with scroll position recovery.\n * 11. **Base URL Based on Environment**: Configure `grab.defaults.baseURL` once at the top, overide with `SERVER_API_URL` in `.env`.\n * 12. **Frontend Cache**: Set cache headers and retrieve from frontend memory for repeat requests to static data.\n * 13. **Regrab On Error**: Regrab on timeout error, or on window refocus, or on network change, or on stale data.\n * 14. **Framework Agnostic**: Alternatives like TanStack work only in component initialization and depend on React & others.\n * 15. **Globals**: Adds to window in browser or global in Node.js so you only import once: `grab()`, `log()`, `grab.log`, `grab.mock`, `grab.defaults`\n * 16. **TypeScript Tooltips**: Developers can hover over option names and autocomplete TypeScript.\n * 17. **Request Stategies**: [🎯 Examples](https://grab.js.org/guide/Examples) show common stategies like debounce, repeat, proxy, unit tests, interceptors, file upload, etc\n * 18. **Rate Limiting**: Built-in rate limiting to prevent multi-click cascading responses, require to wait seconds between requests.\n * 19. **Repeat**: Repeat request this many times, or repeat every X seconds to poll for updates.\n * 20. **Loading Icons**: Import from `grab-url/icons` to get enhanced animated loading icons.\n *\n * @param {string} path The full URL path OR relative path on this server after `grab.defaults.baseURL`\n * @param {object} [options={}] Request params for GET or body for POST/PUT/PATCH and utility options\n * @param {string} [options.method] default=\"GET\" The HTTP method to use\n * @param {object} [options.response] Pre-initialized object which becomes response JSON, no need for `.data`.\n *  isLoading and error may also be set on this object. May omit and use return if load status is not needed.\n * @param {boolean} [options.cancelOngoingIfNew]  default=false Cancel previous requests to same path\n * @param {boolean} [options.cancelNewIfOngoing] default=false Cancel if a request to path is in progress\n * @param {boolean} [options.cache] default=false Whether to cache the request and from frontend cache\n * @param {boolean} [options.debug] default=false Whether to log the request and response\n * @param {number} [options.timeout] default=30 The timeout for the request in seconds\n * @param {number} [options.cacheForTime] default=60 Seconds to consider data stale and invalidate cache\n * @param {number} [options.rateLimit] default=0 If set, how many seconds to wait between requests\n * @param {string} [options.baseURL] default='/api/' base url prefix, override with SERVER_API_URL env\n * @param {boolean} [options.setDefaults] default=false Pass this with options to set\n *  those options as defaults for all requests.\n * @param {number} [options.retryAttempts] default=0 Retry failed requests this many times\n * @param {array} [options.infiniteScroll] default=null [page key, response field to concatenate, element with results]\n * @param {number} [options.repeat] default=0 Repeat request this many times\n * @param {number} [options.repeatEvery] default=null Repeat request every seconds\n * @param {function} [options.logger] default=log Custom logger to override the built-in color JSON log()\n * @param {function} [options.onRequest] Set with defaults to modify each request data.\n *  Takes and returns in order: path, response, params, fetchParams\n * @param {function} [options.onResponse] Set with defaults to modify each request data.\n *  Takes and returns in order: path, response, params, fetchParams\n * @param {function} [options.onStream] Set with defaults to process the response as a stream (i.e., for instant unzip)\n * @param {function} [options.onError] Set with defaults to modify the error data. Takes: error, path, params\n * @param {number} [options.debounce] default=0 Seconds to debounce request, wait to execute so that other requests may override\n * @param {boolean} [options.regrabOnStale] default=false Refetch when cache is past cacheForTime\n * @param {boolean} [options.regrabOnFocus] default=false Refetch on window refocus\n * @param {boolean} [options.regrabOnNetwork] default=false Refetch on network change\n * @param {any} [...params] All other params become GET params, POST body, and other methods.\n * @returns {Promise<Object>} The response object with resulting data or .error if error.\n * @author [vtempest (2025)](https://github.com/vtempest/GRAB-URL)\n * @see  [🎯 Examples](https://grab.js.org/guide/Examples) [📑 Docs](https://grab.js.org)\n * @example import grab from 'grab-url';\n * let res = {};\n * await grab('search', {\n *   response: res,\n *   query: \"search words\"\n * })\n */\nexport default async function grab<TResponse = any, TParams = any>(\n  path: string,\n  options: GrabOptions<TResponse, TParams>\n): Promise<GrabResponse<TResponse>> {\n  let {\n    headers,\n    response = {} as any, // Pre-initialized object to set the response in. isLoading and error are also set on this object.\n    method = options.post // set post: true for POST, omit for GET\n      ? \"POST\"\n      : options.put\n      ? \"PUT\"\n      : options.patch\n      ? \"PATCH\"\n      : \"GET\",\n    cache = false, // Enable/disable frontend caching\n    cacheForTime = 60, // Seconds to consider data stale and invalidate cache\n    timeout = 30, // Request timeout in seconds\n    baseURL = (typeof process !== \"undefined\" && process.env.SERVER_API_URL) ||\n      \"/api/\", // Use env var or default to /api/\n    cancelOngoingIfNew = false, // Cancel previous request for same path\n    cancelNewIfOngoing = false, // Don't make new request if one is ongoing\n    rateLimit = 0, // Minimum seconds between requests\n    debug = false, // Auto-enable debug on localhost\n    // typeof window !== \"undefined\" && window?.location?.hostname?.includes(\"localhost\"),\n    infiniteScroll = null, // page key, response field to concatenate, element with results\n    setDefaults = false, // Set these options as defaults for future requests\n    retryAttempts = 0, // Retry failed requests once\n    logger = log, // Custom logger to override the built-in color JSON log()\n    onRequest = null, // Hook to modify request data before request is made\n    onResponse = null, // Hook to modify request data after request is made\n    onError = null, // Hook to modify request data after request is made\n    onStream = null, // Hook to process the response as a stream (i.e., for instant unarchiving)\n    repeatEvery = null, // Repeat request every seconds\n    repeat = 0, // Repeat request this many times\n    debounce = 0, // Seconds to debounce request, wait to execute so that other requests may override\n    regrabOnStale = false, // Refetch when cache is past cacheForTime\n    regrabOnFocus = false, // Refetch on window refocus\n    regrabOnNetwork = false, // Refetch on network change\n    post = false,\n    put = false,\n    patch = false,\n    body = null,\n    ...params // All other params become request params/query\n  } = {\n    // Destructure options with defaults, merging with any globally set defaults\n    ...(typeof window !== \"undefined\"\n      ? window?.grab?.defaults\n      : (global || globalThis)?.grab?.defaults || {}),\n    ...options,\n  };\n\n  // Handle URL construction\n  // Ensures proper joining of baseURL and path\n  let s = (t) => path.startsWith(t);\n  if (s(\"http:\") || s(\"https:\")) baseURL = \"\";\n  else if (!s(\"/\") && !baseURL.endsWith(\"/\")) path = \"/\" + path;\n  else if (s(\"/\") && baseURL.endsWith(\"/\")) path = path.slice(1);\n\n  // try {\n    //handle debounce\n    if (debounce > 0)\n      return (await debouncer(async () => {\n        await grab(path, { ...options, debounce: 0 });\n      }, debounce * 1000)) as GrabResponse;\n\n    // Handle repeat options:\n    // - repeat: Makes the same request multiple times sequentially\n    // - repeatEvery: Makes the request periodically on an interval\n    if (repeat > 1) {\n      for (let i = 0; i < repeat; i++) {\n        await grab(path, { ...options, repeat: 0 });\n      }\n      return response;\n    }\n    if (repeatEvery) {\n      setInterval(async () => {\n        await grab(path, { ...options, repeat: 0, repeatEvery: null });\n      }, repeatEvery * 1000);\n      return response;\n    }\n\n    // Store the provided options as new defaults if setDefaults flag is set\n    // This allows configuring default options that apply to all future requests\n    if (options?.setDefaults) {\n      if (typeof window !== \"undefined\")\n        window.grab.defaults = { ...options, setDefaults: undefined };\n      else if (typeof (global || globalThis).grab !== \"undefined\")\n        (global || globalThis).grab.defaults = {\n          ...options,\n          setDefaults: undefined,\n        };\n\n      return;\n    }\n\n    // regrab on stale, on window refocus, on network\n    if (typeof window !== undefined) {\n      const regrab = async () => await grab(path, { ...options, cache: false });\n      if (regrabOnStale && cache) setTimeout(regrab, 1000 * cacheForTime);\n      if (regrabOnNetwork) window.addEventListener(\"online\", regrab);\n      if (regrabOnFocus) {\n        window.addEventListener(\"focus\", regrab);\n        document.addEventListener(\"visibilitychange\", async () => {\n          if (document.visibilityState === \"visible\") await regrab();\n        });\n      }\n    }\n\n    // Handle response parameter which can be either an object to populate\n    // or a function to call with results (e.g. React setState)\n    let resFunction = typeof response === \"function\" ? response : null;\n    if (!response || resFunction) response = {};\n\n    var [paginateKey, paginateResult, paginateElement] = infiniteScroll || [];\n\n    // Configure infinite scroll behavior if enabled\n    // Attaches scroll listener to specified element that triggers next page load\n    if (infiniteScroll?.length && typeof paginateElement !== \"undefined\"\n         && typeof window !== \"undefined\") {\n      let paginateDOM =\n        typeof paginateElement === \"string\"\n          ? document.querySelector(paginateElement)\n          : paginateElement;\n\n      if (!paginateDOM) log(\"paginateDOM not found\", { color: \"red\" });\n\n      if (window.scrollListener) \n        paginateDOM.removeEventListener(\"scroll\", window.scrollListener);\n\n      // Your modified scroll listener with position saving\n      window.scrollListener = async (event) => {\n        const t = event.target as HTMLElement;\n        \n        // Save scroll position whenever user scrolls\n        localStorage.setItem(\n          \"scroll\",\n          JSON.stringify([t.scrollTop, t.scrollLeft, paginateElement])\n        );\n\n        if (t.scrollHeight - t.scrollTop <= t.clientHeight + 200) {\n          await grab(path, {\n            ...options,\n            cache: false,\n            [paginateKey]: priorRequest?.currentPage + 1,\n          });\n        }\n      };\n\n      if (paginateDOM) \n          paginateDOM.addEventListener(\"scroll\", window.scrollListener);\n    }\n\n    // Check request history for a previous request with same path/params\n    // Used for caching and pagination. Ignores pagination params when comparing.\n    let paramsAsText = JSON.stringify(\n      paginateKey ? { ...params, [paginateKey]: undefined } : params\n    );\n    let priorRequest = grab?.log?.find(\n      (e) => e.request == paramsAsText && e.path == path\n    );\n\n    // Handle response data management based on pagination settings\n    if (!paginateKey) {\n      // Clear any existing response data\n      for (let key of Object.keys(response)) response[key] = undefined;\n\n      // For non-paginated requests:\n      // Return cached response if caching enabled and identical request exists\n      // after returning cache, proceed with call to revalidate ensure data is up to date\n      if (\n        cache &&\n        (!cacheForTime ||\n          priorRequest?.lastFetchTime > Date.now() - 1000 * cacheForTime)\n      ) {\n        // set response to cache data\n        for (let key of Object.keys(priorRequest.res))\n          response[key] = priorRequest.res[key];\n        if (resFunction) response = resFunction(response);\n\n        // if (!cacheValidate)  return response;\n      }\n    } else {\n      // For paginated requests:\n      // Track current page number and append results to existing data\n      let pageNumber =\n        priorRequest?.currentPage + 1 || params?.[paginateKey] || 1;\n\n      // Clear response if this is a new request with new params\n      if (!priorRequest) {\n        response[paginateResult] = [];\n        pageNumber = 1;\n      }\n\n      // Update page tracking\n      if (priorRequest) priorRequest.currentPage = pageNumber;\n      // @ts-ignore\n      params[paginateKey] = pageNumber;\n    }\n\n    // Set loading state on response object\n    if (resFunction) resFunction({ isLoading: true });\n    else if (typeof response === \"object\") response.isLoading = true;\n\n    if (resFunction) response = resFunction(response);\n\n    // Enforce rate limiting between requests if configured\n    if (\n      rateLimit > 0 &&\n      priorRequest?.lastFetchTime &&\n      priorRequest.lastFetchTime > Date.now() - 1000 * rateLimit\n    )\n      throw new Error(`Fetch rate limit exceeded for ${path}. \n        Wait ${rateLimit}s between requests.`);\n\n    // Handle request cancellation based on configuration:\n    // - cancelOngoingIfNew: Cancels any in-progress request for same path\n    // - cancelNewIfOngoing: Prevents new request if one is already in progress\n    if (priorRequest?.controller)\n      if (cancelOngoingIfNew) priorRequest.controller.abort();\n      else if (cancelNewIfOngoing) return { isLoading: true } as GrabResponse;\n\n    // Track new request in history log\n    if (typeof grab.log != \"undefined\")\n      grab.log?.unshift({\n        path,\n        request: paramsAsText,\n        lastFetchTime: Date.now(),\n        controller: new AbortController(),\n      });\n\n    // Configure fetch request parameters including headers, cache settings,\n    // and timeout/cancellation signals\n    let fetchParams = {\n      method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        ...headers,\n      },\n      body: params.body,\n      redirect: \"follow\" as RequestRedirect,\n      cache: cache ? \"force-cache\" : (\"no-store\" as RequestCache),\n      signal: cancelOngoingIfNew\n        ? grab.log[0]?.controller?.signal\n        : AbortSignal.timeout(timeout * 1000),\n    } as RequestInit;\n\n    // Format request parameters based on HTTP method\n    // POST/PUT/PATCH send data in request body\n    // GET/DELETE append data as URL query parameters\n    let paramsGETRequest = \"\";\n    if ([\"POST\", \"PUT\", \"PATCH\"].includes(method))\n      fetchParams.body = params.body || JSON.stringify(params);\n    else\n      paramsGETRequest =\n        (Object.keys(params).length ? \"?\" : \"\") +\n        new URLSearchParams(params).toString();\n\n    // Execute pre-request hook if configured\n    // Allows modifying request data before sending\n    if (typeof onRequest === \"function\")\n      [path, response, params, fetchParams] = onRequest(\n        path,\n        response,\n        params,\n        fetchParams\n      );\n\n    // Process request through mock handler if configured\n    // Otherwise make actual API request\n    let res = null,\n      startTime = new Date(),\n      mockHandler = grab.mock?.[path] as GrabMockHandler;\n\n    let wait = (s) => new Promise((res) => setTimeout(res, s * 1000 || 0));\n\n    if (\n      mockHandler &&\n      (!mockHandler.params || mockHandler.method == method) &&\n      (!mockHandler.params ||\n        paramsAsText == JSON.stringify(mockHandler.params))\n    ) {\n      await wait(mockHandler.delay);\n\n      res =\n        typeof mockHandler.response === \"function\"\n          ? mockHandler.response(params)\n          : mockHandler.response;\n    } else {\n      // Make actual API request and handle response based on content type\n      res = await fetch(baseURL + path + paramsGETRequest, fetchParams).catch(\n        (e) => {\n          throw new Error(e);\n        }\n      );\n\n      if (!res.ok)\n        throw new Error(`HTTP error: ${res.status} ${res.statusText}`);\n\n      // Convert browser ReadableStream to Node.js stream\n      let type = res.headers.get(\"content-type\");\n\n      if (onStream) await onStream(res.body);\n      else\n        res = await (type\n          ? type.includes(\"application/json\")\n            ? res && res.json()\n            : type.includes(\"application/pdf\") ||\n              type.includes(\"application/octet-stream\")\n            ? res.blob()\n            : res.text()\n          : res.json()\n        ).catch((e) => {\n          throw new Error(\"Error parsing response: \" + e);\n        });\n    }\n\n    // Execute post-request hook if configured\n    // Allows modifying response data before processing\n    if (typeof onResponse === \"function\")\n      [path, response, params, fetchParams] = onResponse(\n        path,\n        response,\n        params,\n        fetchParams\n      );\n\n    // Clear request tracking states\n    if (resFunction) resFunction({ isLoading: undefined });\n    else if (typeof response === \"object\") delete response?.isLoading;\n\n    delete priorRequest?.controller;\n\n    // Log debug information if enabled\n    // Includes request details, timing, and response structure\n    const elapsedTime = (\n      (Number(new Date()) - Number(startTime)) /\n      1000\n    ).toFixed(1);\n    if (debug) {\n      logger(\n        \"Path:\" +\n          baseURL +\n          path +\n          paramsGETRequest +\n          \"\\n\" +\n          JSON.stringify(options, null, 2) +\n          \"\\nTime: \" +\n          elapsedTime +\n          \"s\\nResponse: \" +\n          printJSONStructure(res)\n      );\n      // console.log(res);\n    }\n\n    // if (typeof res === \"undefined\") return;\n\n    // Update response object with results\n    // For paginated requests, concatenates with existing results\n    if (typeof res === \"object\") {\n      for (let key of Object.keys(res))\n        response[key] =\n          paginateResult == key && response[key]?.length\n            ? [...response[key], ...res[key]]\n            : res[key];\n\n      if (typeof response !== \"undefined\") response.data = res; // for axios compat\n    } else if (resFunction) resFunction({ data: res, ...res });\n    else if (typeof response === \"object\") response.data = res;\n\n    // Store request/response in history log\n    if (typeof grab.log != \"undefined\")\n      grab.log?.unshift({\n        path,\n        request: JSON.stringify({ ...params, paginateKey: undefined }),\n        response,\n        lastFetchTime: Date.now(),\n      });\n\n    if (resFunction) response = resFunction(response);\n\n    return response;\n  // } catch (error) {\n  //   // Handle any errors that occurred during request processing\n  //   let errorMessage =\n  //     \"Error: \" + error.message + \"\\nPath:\" + baseURL + path + \"\\n\";\n  //   JSON.stringify(params);\n\n  //   if (typeof onError === \"function\")\n  //     onError(error.message, baseURL + path, params);\n\n  //   // Retry request if retries are configured and attempts remain\n  //   if (options.retryAttempts > 0)\n  //     return await grab(path, {\n  //       ...options,\n  //       retryAttempts: --options.retryAttempts,\n  //     });\n\n  //   // Update error state in response object\n  //   // Do not show errors for duplicate aborted requests\n  //   if (!error.message.includes(\"signal\") && options.debug) {\n  //     logger(errorMessage, { color: \"red\" });\n  //     if (debug && typeof document !== undefined) showAlert(errorMessage);\n  //   }\n  //   response.error = error.message;\n  //   if (typeof response === \"function\") {\n  //     response.data = response({ isLoading: undefined, error: error.message });\n  //     response = response.data;\n  //   } else delete response?.isLoading;\n\n  //   // Log error in request history\n  //   if (typeof grab.log != \"undefined\")\n  //     grab.log?.unshift({\n  //       path,\n  //       request: JSON.stringify(params),\n  //       error: error.message,\n  //     });\n\n  //   // if (typeof options.response === \"function\")\n  //   //   response = options.response(response);\n  //   return response;\n  // }\n}\n\n/**\n * Creates a new instance of grab with default options\n * to apply to all requests made by this instance\n * @param {Object} defaults - options for all requests by instance\n * @returns {Function} grab() function using those options\n */\ngrab.instance =\n  (defaults = {}) =>\n  (path, options = {}) =>\n    grab(path, { ...defaults, ...options });\n\n// delays execution so that future calls may override and only executes last one\nconst debouncer = async (func, wait) => {\n  let timeout;\n  return async function executedFunction(...args) {\n    const later = async () => {\n      clearTimeout(timeout);\n      await func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};\n\n// Add globals to window in browser, or global in Node.js\nif (typeof window !== \"undefined\") {\n  window.log = log;\n  // @ts-ignore\n  window.grab = grab;\n\n  window.grab.log = [];\n  window.grab.mock = {};\n  window.grab.defaults = {};\n\n  //Ctrl+I setup dev tools\n  setupDevTools();\n\n  // Restore scroll position when page loads or component mounts\n  document.addEventListener(\"DOMContentLoaded\", () => {\n    let [scrollTop, scrollLeft, paginateElement] =\n      JSON.parse(localStorage.getItem(\"scroll\")) || [];\n    if (!scrollTop) return;\n    document.querySelector(paginateElement).scrollTop = scrollTop;\n    document.querySelector(paginateElement).scrollLeft = scrollLeft;\n  });\n} else if (typeof global !== \"undefined\") {\n  grab.log = [];\n  grab.mock = {};\n  grab.defaults = {};\n  global.log = log;\n  global.grab = grab.instance();\n} else if (typeof globalThis !== \"undefined\") {\n  grab.log = [];\n  grab.mock = {};\n  grab.defaults = {};\n  globalThis.log = log;\n  globalThis.grab = grab.instance();\n}\n\n/***************** TYPESCRIPT INTERFACES *****************/\n\n// Core response object that gets populated with API response data\nexport type GrabResponse<TResponse = any> = TResponse & {\n  /** Indicates if request is currently in progress */\n  isLoading?: boolean;\n  /** Error message if request failed */\n  error?: string;\n  /** Binary or text response data (JSON is set to the root)*/\n  data?: TResponse | any;\n  /** The actual response data - type depends on API endpoint */\n  [key: string]: unknown;\n};\n\nexport type GrabOptions<TResponse = any, TParams = any> = TParams & {\n  /** include headers and authorization in the request */\n  headers?: Record<string, string>;\n  /** Pre-initialized object which becomes response JSON, no need for .data */\n  response?: TResponse | ((params: TParams) => TResponse) | any;\n  /** default=\"GET\" The HTTP method to use */\n  method?: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\" | \"OPTIONS\" | \"HEAD\";\n  /** default=false Whether to cache the request and from frontend cache */\n  cache?: boolean;\n  /** default=60 Seconds to consider data stale and invalidate cache */\n  cacheForTime?: number;\n  /** default=30 The timeout for the request in seconds */\n  timeout?: number;\n  /** default='/api/' base url prefix, override with SERVER_API_URL env */\n  baseURL?: string;\n  /** default=true Cancel previous requests to same path */\n  cancelOngoingIfNew?: boolean;\n  /** default=false Cancel if a request to path is in progress */\n  cancelNewIfOngoing?: boolean;\n  /** default=false If set, how many seconds to wait between requests */\n  rateLimit?: number;\n  /** default=false Whether to log the request and response */\n  debug?: boolean;\n  /** default=null [page key, response field to concatenate, element with results] */\n  infiniteScroll?: [string, string, string | HTMLElement];\n  /** default=false Pass this with options to set those options as defaults for all requests */\n  setDefaults?: boolean;\n  /** default=0 Retry failed requests this many times */\n  retryAttempts?: number;\n  /** default=log Custom logger to override the built-in color JSON log() */\n  logger?: (...args: any[]) => void;\n  /** Set with defaults to modify each request data. Takes and returns in order: path, response, params, fetchParams */\n  onRequest?: (...args: any[]) => any;\n  /** Set with defaults to modify each request data. Takes and returns in order: path, response, params, fetchParams */\n  onResponse?: (...args: any[]) => any;\n  /** Set with defaults to modify each request data. Takes and returns in order: error, path, params */\n  onError?: (...args: any[]) => any;\n  /** Set with defaults to process the response as a stream (i.e., for instant unzip) */\n  onStream?: (...args: any[]) => any;\n  /** default=0 Repeat request this many times */\n  repeat?: number;\n  /** default=null Repeat request every seconds */\n  repeatEvery?: number;\n  /** default=0 Seconds to debounce request, wait to execute so that other requests may override */\n  debounce?: number;\n  /** default=false Refetch when cache is past cacheForTime */\n  regrabOnStale?: boolean;\n  /** default=false Refetch on window refocus */\n  regrabOnFocus?: boolean;\n  /** default=false Refetch on network change */\n  regrabOnNetwork?: boolean;\n  /** shortcut for method: \"POST\" */\n  post?: boolean;\n  /** shortcut for method: \"PUT\" */\n  put?: boolean;\n  /** shortcut for method: \"PATCH\" */\n  patch?: boolean;\n  /** default=null The body of the POST/PUT/PATCH request (can be passed into main)*/\n  body?: any;\n  /** All other params become GET params, POST body, and other methods */\n  [key: string]: TParams | any;\n};\n\n// Combined options and parameters interface\n\n// Mock server configuration for testing\nexport interface GrabMockHandler<TParams = any, TResponse = any> {\n  /** Mock response data or function that returns response */\n  response: TResponse | ((params: TParams) => TResponse);\n  /** HTTP method this mock should respond to */\n  method?: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\" | \"OPTIONS\" | \"HEAD\";\n  /** Request parameters this mock should match */\n  params?: TParams;\n  /** Delay in seconds before returning mock response */\n  delay?: number;\n}\n\n// Request log entry for debugging and history\nexport interface GrabLogEntry {\n  /** API path that was requested */\n  path: string;\n  /** Stringified request parameters */\n  request: string;\n  /** Response data (only present for successful requests) */\n  response?: any;\n  /** Error message (only present for failed requests) */\n  error?: string;\n  /** Timestamp when request was made */\n  lastFetchTime: number;\n  /** Abort controller for request cancellation */\n  controller?: AbortController;\n  /** Current page number for paginated requests */\n  currentPage?: number;\n}\n\n// Global grab configuration and state\nexport interface GrabGlobal {\n  /** Default options applied to all requests */\n  defaults?: Partial<GrabOptions>;\n  /** Request history and debugging info */\n  log?: GrabLogEntry[];\n  /** Mock server handlers for testing */\n  mock?: Record<string, GrabMockHandler>;\n  /** Create a separate instance of grab with separate default options */\n  instance?: (defaultOptions?: Partial<GrabOptions>) => GrabFunction;\n}\n\n// Main grab function signature with overloads for different use cases\nexport interface GrabFunction {\n  /**\n   * ### GRAB: Generate Request to API from Browser\n   * ![grabAPILogo](https://i.imgur.com/xWD7gyV.png)\n   * Make API request with path\n   * @returns {Promise<Object>} The response object with resulting data or .error if error.\n   * @author [vtempest (2025)](https://github.com/vtempest/GRAB-URL)\n   * @see  [🎯 Examples](https://grab.js.org/guide/Examples) [📑 Docs](https://grab.js.org/lib)\n   */\n  <TResponse = any, TParams = Record<string, any>>(path: string): Promise<\n    GrabResponse<TResponse>\n  >;\n\n  /**\n   * ### GRAB: Generate Request to API from Browser\n   * ![grabAPILogo](https://i.imgur.com/xWD7gyV.png)\n   * Make API request with path and options/parameters\n   * @returns {Promise<Object>} The response object with resulting data or .error if error.\n   * @author [vtempest (2025)](https://github.com/vtempest/GRAB-URL)\n   * @see  [🎯 Examples](https://grab.js.org/guide/Examples) [📑 Docs](https://grab.js.org/lib)\n   */\n  <TResponse = any, TParams = Record<string, any>>(\n    path: string,\n    config: GrabOptions<TResponse, TParams>\n  ): Promise<GrabResponse<TResponse>>;\n\n  /** Default options applied to all requests */\n  defaults?: Partial<GrabOptions>;\n\n  /** Request history and debugging info for all requests */\n  log?: GrabLogEntry[];\n\n  /** Mock server handlers for testing */\n  mock?: Record<string, GrabMockHandler>;\n\n  /** Create a separate instance of grab with separate default options */\n  instance?: (defaultOptions?: Partial<GrabOptions>) => GrabFunction;\n}\n\n// Log function for debugging\nexport interface LogFunction {\n  /**\n   * Log messages with custom styling\n   * @param message - Message to log (string or object)\n   */\n  (message: string | object, options?: LogOptions): void;\n}\n\n// Utility function to describe JSON structure\nexport interface printJSONStructureFunction {\n  /**\n   * Generate TypeDoc-like description of JSON object structure\n   * @param obj - The JSON object to describe\n   * @returns String representation of object structure\n   */\n  (obj: any): string;\n}\n\n// Helper type for creating typed API clients\n// export type TypedGrabFunction = <\n//   TResponse = any,\n//   TParams = Record<string, any>\n// >(\n//   path: string,\n//   config?: GrabOptions<TResponse, TParams>\n// ) => Promise<GrabResponse<TResponse>>;\n\ndeclare global {\n  // Browser globals\n  interface Window {\n    grab: GrabFunction;\n    log: LogFunction;\n    scrollListener: (event: Event) => void; // replace 'any' with the actual type if you know it (e.g., a function type)\n  }\n\n  // Node.js globals\n  namespace NodeJS {\n    interface Global {\n      grab: GrabFunction;\n      log: LogFunction;\n    }\n  }\n\n  // Global variables available after script inclusion\n  var log: LogFunction;\n  var grab: GrabFunction;\n}\n\nexport { grab, log, showAlert, printJSONStructure };\n"],"names":["result","grab","s","res"],"mappings":"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"}